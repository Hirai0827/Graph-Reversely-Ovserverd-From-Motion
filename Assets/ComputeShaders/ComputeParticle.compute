// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Update

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct Particle
{
    float2 pos;
    float2 vel;
    float lifeTime;
    int isActive;
};

struct ParticleIndex
{
    uint index;
    uint cellIndex;
};

struct ParticleConnection
{
    uint indexA;
    uint indexB;
    float2 basePosition;
    float intensity;
};

StructuredBuffer<Particle> src;
RWStructuredBuffer<Particle> dest;
StructuredBuffer<ParticleConnection> connectionBuffer;
StructuredBuffer<int> connectionIndexBuffer;
StructuredBuffer<uint> connectionBeginIndexBuffer;
StructuredBuffer<uint> connectionEndIndexBuffer;
StructuredBuffer<ParticleIndex> particleIndexBuffer;
StructuredBuffer<uint> particleBeginIndexBuffer;
StructuredBuffer<uint> particleEndIndexBuffer;

float deltaTime;
int maxParticle;
int maxConnection;

float2 minCorner;
float2 maxCorner;

int cellCountX;
int cellCountY;

[numthreads(256,1,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    // uint index = id.x;
    // Particle p;
    // p.pos = float2(sin(index * 6.28 / 128.0),cos(index * 6.28 / 128.0)) * 3.0;
    // p.pos = p.pos + normalize(p.pos) * sin(index /128.0 * 12.0 * 3.14159) * 1.0;
    // p.vel = float2(0.0,0.0);
    // p.lifeTime = 10000.0f + index * 100.0f;
    // dest[index] = p;

    uint index = id.x;
    Particle p;
    p.pos = 0;
    p.vel = 0;
    p.isActive = 0;
    p.lifeTime = 100.0;
    dest[index] = p;
}

[numthreads(256,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    uint index = particleIndexBuffer[id.x].index;
    uint cellIndex = particleIndexBuffer[id.x].cellIndex;
    
    Particle p = src[index];
    int X = cellIndex % cellCountX;
    int Y = (cellIndex - X) / cellCountX;
    float2 acc = float2(0.0,0.0);

    //calc effect of connection

    int beginConnectionIndex = connectionBeginIndexBuffer[index];
    int endConnectionIndex = connectionEndIndexBuffer[index];
    
    for(int i = beginConnectionIndex; i < endConnectionIndex; i++)
    {
        ParticleConnection c = connectionBuffer[connectionIndexBuffer[i]];
        if(c.indexB >= 0)
        {
            Particle connectedP = src[c.indexB];
            float2 relPos = connectedP.pos - p.pos;
            float distance = length(c.basePosition) - length(relPos);
            float2 norm = float2(c.basePosition.y,-c.basePosition.x);
            float2 diff = dot(relPos - c.basePosition,norm)/dot(norm,norm) * norm;
            acc = acc - c.intensity *normalize(relPos) * distance;
            acc = acc + c.intensity * normalize(diff) * dot(diff,diff) * 2.0;
            
            //acc = acc + (normalize(relPos)/(1.0 + distance * distance * 0.25)) * 120.0;
        }
    }

    //calc effect of particle

    
    for(int xi = -2; xi < 3; xi++)
    {
        for(int yi = -2; yi < 3; yi++)
        {
            if(0 <= X + xi && X + xi < cellCountX && 0 <= Y + yi && Y + yi < cellCountY)
            {
                int targetCellIndex = (X + xi) + (Y + yi) * cellCountX;
                int beginIndex = particleBeginIndexBuffer[targetCellIndex];
                int endIndex = particleEndIndexBuffer[targetCellIndex];
                for(int j = beginIndex; j < endIndex; j++)
                {
                    uint targetIndex = particleIndexBuffer[j].index;
                    if(targetIndex != index)
                    {
                        Particle targetParticle = src[targetIndex];
                        float2 relPos = targetParticle.pos - p.pos;
                        acc = acc - (relPos)/(0.01 + dot(relPos,relPos) * 50.0) * 1.0;
                    }
                }
            }
        }
    }
    
    p.pos = p.pos + p.vel * deltaTime;
    p.vel = p.vel + acc * deltaTime;
    p.vel = p.vel *0.99;
    p.vel = isnan(p.vel) ? 0.0 : p.vel;
    p.lifeTime = p.lifeTime - deltaTime;
    if(p.lifeTime < 0.0 && p.isActive == 1)
    {
        p.isActive = 0;
    }
    p.pos.x = clamp(p.pos.x,minCorner.x + 0.0001,maxCorner.x - 0.0001);
    p.pos.y = clamp(p.pos.y,minCorner.y + 0.0001,maxCorner.y - 0.0001);
    if(p.pos.x < minCorner.x)
    {
        p.pos.x = minCorner.x + 0.0001;
        p.vel.x = -p.vel.x;
    }
    if(p.pos.x > maxCorner.x)
    {
        p.pos.x = maxCorner.x - 0.0001;
        p.vel.x = -p.vel.x;
    }

    if(p.pos.y < minCorner.y)
    {
        p.pos.y = minCorner.y + 0.0001;
        p.vel.y = -p.vel.y;
    }
    if(p.pos.y > maxCorner.y)
    {
        p.pos.y = maxCorner.y - 0.0001;
        p.vel.y = -p.vel.y;
    }
    dest[index] = p;
}
