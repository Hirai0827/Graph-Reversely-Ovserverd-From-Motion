// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Update
#pragma kernel ResetIndex
#pragma kernel ReIndex

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


struct Particle
{
    float2 pos;
    float2 vel;
    float lifeTime;
    int isActive;
};


struct ParticleConnection
{
    uint indexA;
    uint indexB;
    float2 basePosition;
    float intensity;
};

StructuredBuffer<ParticleConnection> src;
RWStructuredBuffer<ParticleConnection> dest;

StructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<int> indexBuffer;
RWStructuredBuffer<uint> beginIndexBuffer;
RWStructuredBuffer<uint> endIndexBuffer;
float deltaTime;
int maxConnection;

[numthreads(256,1,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    // ParticleConnection c;
    // if(index >= 128)
    // {
    //     c.indexB = index % 128;
    //     c.indexA = (index + 1) % 128;
    // }else
    // {
    //     c.indexA = index % 128;
    //     c.indexB = (index + 1) % 128;
    // }
    // float2 posA = float2(sin(c.indexA * 6.28 / 128.0),cos(c.indexA * 6.28 / 128.0)) * 2.0;
    // float2 posB = float2(sin(c.indexB * 6.28 / 128.0),cos(c.indexB * 6.28 / 128.0)) * 2.0;
    // c.basePosition = posB - posA;
    // c.intensity = 22.5;
    // dest[index] = c;
    ParticleConnection c;
    c.indexA = 0xffffffff;
    c.indexB = 0xffffffff;
    c.intensity = 0.0;
    c.basePosition = 0.0;
    dest[index] = c;
    indexBuffer[index] = index;
}

[numthreads(256,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    ParticleConnection c = src[index];
    if(c.indexA == -1 || c.indexB == -1)
    {
        dest[index] = c;
        return;
    }
    Particle pA = particleBuffer[c.indexA];
    Particle pB = particleBuffer[c.indexB];
    if(pA.lifeTime < 0.0 || pB.lifeTime < 0.0)
    {
        c.indexA = -1;
        c.indexB = -1;
    }
    dest[index] = c;
}

[numthreads(256,1,1)]
void ResetIndex (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    beginIndexBuffer[index] = 0xffffffff;
    endIndexBuffer[index] = 0xffffffff;
    
}

[numthreads(256,1,1)]
void ReIndex (uint3 id : SV_DispatchThreadID)
{
    int index = id.x;

    //indexBuffer[i]で並べたsrcはc.indexAが昇順に並んでいる
    int prevIndexA = src[indexBuffer[index - 1]].indexA;
    int currentIndexA = src[indexBuffer[index]].indexA;
    int nextIndexA = src[indexBuffer[index+1]].indexA;

    if(index - 1 < 0)
    {
        prevIndexA = 0xffffffff;
    }
    if(index + 1 >= maxConnection)
    {
        nextIndexA = 0xffffffff;
    }

    if(prevIndexA != currentIndexA)
    {
        beginIndexBuffer[currentIndexA] = index;
    }
    if(currentIndexA != nextIndexA)
    {
        endIndexBuffer[currentIndexA] = index + 1;
    }
    
}
