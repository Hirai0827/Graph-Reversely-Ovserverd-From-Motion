// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Update

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct Particle
{
    float2 pos;
    float2 vel;
    float lifeTime;
    int isActive;
};

struct ParticleConnection
{
    int indexA;
    int indexB;
    float2 basePosition;
    float intensity;
};

StructuredBuffer<Particle> src;
RWStructuredBuffer<Particle> dest;
StructuredBuffer<ParticleConnection> connectionBuffer;
StructuredBuffer<int> connectionIndexBuffer;
StructuredBuffer<int> connectionBeginIndexBuffer;
AppendStructuredBuffer<int> particleIndexPool;
float deltaTime;
int maxParticle;
int maxConnection;

[numthreads(256,1,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    // uint index = id.x;
    // Particle p;
    // p.pos = float2(sin(index * 6.28 / 128.0),cos(index * 6.28 / 128.0)) * 3.0;
    // p.pos = p.pos + normalize(p.pos) * sin(index /128.0 * 12.0 * 3.14159) * 1.0;
    // p.vel = float2(0.0,0.0);
    // p.lifeTime = 10000.0f + index * 100.0f;
    // dest[index] = p;

    uint index = id.x;
    Particle p;
    p.pos = 0;
    p.vel = 0;
    p.isActive = 0;
    p.lifeTime = 100.0;
}

[numthreads(256,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    Particle p = src[index];
    float2 acc = float2(0.0,0.0);

    int beginConnectionIndex = connectionBeginIndexBuffer[index];
    int endConnectionIndex = connectionBeginIndexBuffer[index + 1];
    if(index + 1 == maxParticle)
    {
        endConnectionIndex = maxConnection;
    }
    
    for(int i = beginConnectionIndex; i < min(maxConnection,endConnectionIndex); i++)
    {
        ParticleConnection c = connectionBuffer[connectionIndexBuffer[i]];
        if(c.indexB >= 0)
        {
            Particle connectedP = src[c.indexB];
            float2 relPos = connectedP.pos - p.pos;
            float distance = length(c.basePosition) - length(relPos);
            acc = acc - c.intensity*normalize(relPos) * distance;
            acc = acc + normalize(relPos)/(0.5 + distance * distance * 8.0);
        }
    }
    
    p.pos = p.pos + p.vel * deltaTime;
    p.vel = p.vel + acc * deltaTime;
    p.vel = p.vel - p.vel * deltaTime * 2.0;
    p.vel = isnan(p.vel) ? 0.0 : p.vel;
    p.lifeTime = p.lifeTime - deltaTime;
    if(p.lifeTime < 0.0 && p.isActive == 1)
    {
        p.isActive = 0;
        particleIndexPool.Append(index);
    }
    p.pos.x = clamp(p.pos.x,-8,8);
    p.pos.y = clamp(p.pos.y,-8,8);
    dest[index] = p;
}
